using System.Collections.Generic;
using UnityEngine;

public class ViewManager : MonoBehaviour
{
    public static ViewManager instance;
    [SerializeField] private View currentView;
    [SerializeField] private View startingView;
    [SerializeField] private View[] views;

    [SerializeField] private ModalWindowPanel modalWindowPanel;
    public ModalWindowPanel ModalWindow => modalWindowPanel;


    private readonly Stack<View> history = new();
    private void Awake()
    {
        instance = this;
    }

    public static T GetView<T>() where T : View
    {
        for (int i = 0; i < instance.views.Length; i++)
        {
            if (instance.views[i] is T tview)
            {
                return tview;
            }
        }
        return null;
    }

    public static void show<T>(bool remember = true) where T : View
    {
        for (int i = 0; i < instance.views.Length; i++)
        {
            if (instance.views[i] is T)
            {
                if (instance.currentView != null)
                {
                    if (remember)
                    {
                        instance.history.Push(instance.currentView);

                    }
                    instance.currentView.Hide();
                }
                instance.views[i].Show();
                instance.currentView = instance.views[i];
            }
        }
    }

    public static void showWindow<T>() where T : View
    {
        for (int i = 0; i < instance.views.Length; i++)
        {
            if (instance.views[i] is T)
            {
                instance.views[i].Show();
            }
        }
    }

    public static void show(View tview, bool remember = true)
    {
        if (instance.currentView != null)
        {
            if (remember)
            {
                instance.history.Push(instance.currentView);
            }
            instance.currentView.Hide();
        }
        tview.Show();
        instance.currentView = tview;
    }

    public static void ShowLast()
    {
        if (instance.history.Count != 0)
        {
            show(instance.history.Pop(), false);
        }

    }


    private void Start()
    {
        for (int i = 0; i < views.Length; i++)
        {
            views[i].initialize();
            views[i].Hide();
        }

        if (startingView != null)
        {
            show(startingView, true);
        }
    }

}
